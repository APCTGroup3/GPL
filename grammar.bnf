!----------------------
! Pseudo language grammar
! ---------------------

"Name"     = 'Pseudogrammar'
"Author"   = 'Liam Self'
"Version"  = '0.1'

"Case Sensitive" = 'True'
"Start Symbol" = <Statements>
               
! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter}
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' {String Chars}* '"'
              
Integer = {Number}+
Real    = {Number}+ '.' {Number}+
Boolean = 'True'|'False'

! -------------------------------------------------
! Rules
! -------------------------------------------------

<Statements> ::= <Statement> NewLine <Statements>
               | <Statement>
               | NewLine <Statement>

<Statement> ::= <OptionalExpression>

! ================================================
! MATHEMATICAL EXPRESSIONS
! Following C-like orders of precedence
! ================================================

<OptionalExpression> ::= <Expression>
                       | 

<ExpressionList> ::= <Expression> ',' <ExpressionList>
                   | <Expression>

<Expression> ::= <OrExpression> '+=' <Expression>
               | <OrExpression> '-=' <Expression>
               | <OrExpression> '*=' <Expression>
               | <OrExpression> '/=' <Expression>
               | <OrExpression>

<OrExpression> ::= <AndExpression> 'OR' <Expression>
                 | <AndExpression> '||' <Expression>
                 | <AndExpression>


<AndExpression> ::= <NotExpression> 'AND' <AndExpression>
                  | <NotExpression> '&&' <AndExpression>
                  | <NotExpression>

<NotExpression> ::= '!' <EqualityExpression>
                  | 'NOT'
                  | <EqualityExpression>

<EqualityExpression> ::= <ComparisonExpression> '==' <EqualityExpression>
                       | <ComparisonExpression> '!=' <ComparisonExpression>
                       | <ComparisonExpression>

<ComparisonExpression> ::= <AddExpression> '<' <ComparisonExpression>
                         | <AddExpression> 'lt' <ComparisonExpression>
                         | <AddExpression> 'lessthan' <ComparisonExpression>
                         | <AddExpression> '<=' <ComparisonExpression>
                         | <AddExpression> 'lte' <ComparisonExpression>
                         | <AddExpression> 'lessthanequal' <ComparisonExpression>
                         | <AddExpression> '>' <ComparisonExpression>
                         | <AddExpression> 'gt' <ComparisonExpression>
                         | <AddExpression> 'greaterthan' <ComparisonExpression>
                         | <AddExpression> '>=' <ComparisonExpression>
                         | <AddExpression> 'gte' <ComparisonExpression>
                         | <AddExpression> 'greaterthanequal' <ComparisonExpression>
                         | <AddExpression>

<AddExpression> ::= <MultiExpression> '+' <AddExpression>
                  | <MultiExpression> 'add' <AddExpression>
                  | <MultiExpression> 'plus' <AddExpression>
                  | <MultiExpression> '-' <AddExpression>
                  | <MultiExpression> 'subtract' <AddExpression>
                  | <MultiExpression>

<MultiExpression> ::= <PowerExpression> '*' <MultiExpression>
                    | <PowerExpression> 'mult' <MultiExpression>
                    | <PowerExpression> 'multiply' <MultiExpression>
                    | <PowerExpression> '/' <MultiExpression>
                    | <PowerExpression> 'div' <MultiExpression>
                    | <PowerExpression> 'divide' <MultiExpression>
                    | <PowerExpression>


<PowerExpression> ::= <ExpValue> '^' <PowerExpression>
                    | <ExpValue>

<ExpValue> ::= '(' <Expression> ')'
             | Identifier   '(' <ExpressionList> ')'
             | <NegValue>
             
<NegValue> ::= '-' <Const>
            | <Const>

<Const> ::= Integer
          | String
          | Real
          | Boolean
          | Identifier